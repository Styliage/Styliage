import random

宝珠数量 = 500

#True为抽；False为不抽
策略 = {'红':True, '蓝':False, '绿':False, '白':False}

初始概率_星5精选 = 0.03
初始概率_星5 = 0.03
初始概率_星4 = 0.58
初始概率_星3 = 0.36

数量_星5精选 = {'红':1, '蓝':1, '绿':1, '白':1}
数量_星5 = {'红':48, '蓝':34, '绿':30, '白':25}
数量_星4 = {'红':33, '蓝':32, '绿':22, '白':31}
数量_星3 = {'红':33, '蓝':30, '绿':20, '白':28}

概率_星5精选 = 初始概率_星5精选
概率_星5 = 初始概率_星5
概率_星4 = 初始概率_星4
概率_星3 = 初始概率_星3

总数_星5精选 = 数量_星5精选['红'] + 数量_星5精选['蓝'] + 数量_星5精选['绿'] + 数量_星5精选['白']
总数_星5 = 数量_星5['红'] + 数量_星5['蓝'] + 数量_星5['绿'] + 数量_星5['白']
总数_星4 = 数量_星4['红'] + 数量_星4['蓝'] + 数量_星4['绿'] + 数量_星4['白']
总数_星3 = 数量_星3['红'] + 数量_星3['蓝'] + 数量_星3['绿'] + 数量_星3['白']

def 生成托盘():
    托盘 = []
    for i in range(5):
        随机稀有 = random.random()
        if 随机稀有 < 概率_星5精选:
            随机英雄 = random.random()
            if 随机英雄 < 数量_星5精选['红'] / 总数_星5精选:
                托盘.append(['红', '星5精选'])
            elif 随机英雄 < (数量_星5精选['红'] + 数量_星5精选['蓝']) / 总数_星5精选:
                托盘.append(['蓝', '星5精选'])
            elif 随机英雄 < (数量_星5精选['红'] + 数量_星5精选['蓝'] + 数量_星5精选['绿']) / 总数_星5精选:
                托盘.append(['绿', '星5精选'])
            else:
                托盘.append(['白', '星5精选'])
        elif 随机稀有 < 概率_星5精选 + 概率_星5:
            随机英雄 = random.random()
            if 随机英雄 < 数量_星5['红'] / 总数_星5:
                托盘.append(['红', '星5'])
            elif 随机英雄 < (数量_星5['红'] + 数量_星5['蓝']) / 总数_星5:
                托盘.append(['蓝', '星5'])
            elif 随机英雄 < (数量_星5['红'] + 数量_星5['蓝'] + 数量_星5['绿']) / 总数_星5:
                托盘.append(['绿', '星5'])
            else:
                托盘.append(['白', '星5'])
        elif 随机稀有 < 概率_星5精选 + 概率_星5 + 概率_星4:
            随机英雄 = random.random()
            if 随机英雄 < 数量_星4['红'] / 总数_星4:
                托盘.append(['红', '星4'])
            elif 随机英雄 < (数量_星4['红'] + 数量_星4['蓝']) / 总数_星4:
                托盘.append(['蓝', '星4'])
            elif 随机英雄 < (数量_星4['红'] + 数量_星4['蓝'] + 数量_星4['绿']) / 总数_星4:
                托盘.append(['绿', '星4'])
            else:
                托盘.append(['白', '星4'])
        else:
            随机英雄 = random.random()
            if 随机英雄 < 数量_星3['红'] / 总数_星3:
                托盘.append(['红', '星3'])
            elif 随机英雄 < (数量_星3['红'] + 数量_星3['蓝']) / 总数_星3:
                托盘.append(['蓝', '星3'])
            elif 随机英雄 < (数量_星3['红'] + 数量_星3['蓝'] + 数量_星3['绿']) / 总数_星3:
                托盘.append(['绿', '星3'])
            else:
                托盘.append(['白', '星3'])
    return 托盘

#没有想要的颜色时，选择当前托盘中开出星5英雄概率最低的颜色
def 单抽(托盘):
    概率_红 = 概率_星3 * (数量_星3['红'] / 总数_星3) + 概率_星4 * (数量_星4['红'] / 总数_星4) + 概率_星5 * (数量_星5['红'] / 总数_星5) + 概率_星5精选 * (数量_星5精选['红'] / 总数_星5精选)
    概率_蓝 = 概率_星3 * (数量_星3['蓝'] / 总数_星3) + 概率_星4 * (数量_星4['蓝'] / 总数_星4) + 概率_星5 * (数量_星5['蓝'] / 总数_星5) + 概率_星5精选 * (数量_星5精选['蓝'] / 总数_星5精选)
    概率_绿 = 概率_星3 * (数量_星3['绿'] / 总数_星3) + 概率_星4 * (数量_星4['绿'] / 总数_星4) + 概率_星5 * (数量_星5['绿'] / 总数_星5) + 概率_星5精选 * (数量_星5精选['绿'] / 总数_星5精选)
    概率_白 = 概率_星3 * (数量_星3['白'] / 总数_星3) + 概率_星4 * (数量_星4['白'] / 总数_星4) + 概率_星5 * (数量_星5['白'] / 总数_星5) + 概率_星5精选 * (数量_星5精选['白'] / 总数_星5精选)
    概率_红_出货 = 概率_星5精选 * (数量_星5精选['红'] / 总数_星5精选) / 概率_红
    概率_蓝_出货 = 概率_星5精选 * (数量_星5精选['蓝'] / 总数_星5精选) / 概率_蓝
    概率_绿_出货 = 概率_星5精选 * (数量_星5精选['绿'] / 总数_星5精选) / 概率_绿
    概率_白_出货 = 概率_星5精选 * (数量_星5精选['白'] / 总数_星5精选) / 概率_白
    概率_红_歪 = 概率_星5 * (数量_星5['红'] / 总数_星5) / 概率_红
    概率_蓝_歪 = 概率_星5 * (数量_星5['蓝'] / 总数_星5) / 概率_蓝
    概率_绿_歪 = 概率_星5 * (数量_星5['绿'] / 总数_星5) / 概率_绿
    概率_白_歪 = 概率_星5 * (数量_星5['白'] / 总数_星5) / 概率_白
    概率_全部星5 = {'红':(概率_红_出货 + 概率_红_歪), '蓝':(概率_蓝_出货 + 概率_蓝_歪), '绿':(概率_绿_出货 + 概率_绿_歪), '白':(概率_白_出货 + 概率_白_歪)}
    for i in sorted(概率_全部星5, key = 概率_全部星5.__getitem__):
        for j in range(5):
            if 托盘[j][0] == i:
                return j

单次消费宝珠数量 = [5, 4, 4, 4, 3]
总抽卡数量 = 0
总出货数量 = 0
总歪数量 = 0
叠加概率角色数量 = 0
while 宝珠数量 >= 5:
    出货 = False
    歪 = False
    托盘 = 生成托盘()
    单次抽卡数量 = 0
    for i in range(5):
        if 策略[托盘[i][0]]:
            宝珠数量 -= 单次消费宝珠数量[单次抽卡数量]
            if 宝珠数量 < 0:
                宝珠数量 += 单次消费宝珠数量[单次抽卡数量]
                break
            单次抽卡数量 += 1
            if 托盘[i][1] == '星5精选':
                出货 = True
                总出货数量 += 1
            elif 托盘[i][1] == '星5':
                歪 = True
                总歪数量 += 1

    # 托盘中没有想要抽的颜色时，单抽托盘中歪的概率最低的颜色
    if 单次抽卡数量 == 0 and 宝珠数量 >= 5:
        宝珠数量 -= 5
        单次抽卡数量 = 1
        单抽序号 = 单抽(托盘)
        if 托盘[单抽序号][1] == '星5精选' or 托盘[单抽序号][1] == '星5':
            歪 = True
            总歪数量 += 1
    总抽卡数量 += 单次抽卡数量
    叠加概率角色数量 += 单次抽卡数量

    # 出货与否造成的概率变动
    if 出货 or 歪:
        叠加概率角色数量 = 0
    概率_星5精选 = 初始概率_星5精选 + (int(叠加概率角色数量 / 5) * 0.005 / (初始概率_星5精选 + 初始概率_星5) * 初始概率_星5精选)
    概率_星5 = 初始概率_星5 + (int(叠加概率角色数量 / 5) * 0.005 / (初始概率_星5精选 + 初始概率_星5) * 初始概率_星5)
    概率_星4 = 初始概率_星4 - (int(叠加概率角色数量 / 5) * 0.005 / (初始概率_星4 + 初始概率_星3) * 初始概率_星4)
    概率_星3 = 初始概率_星3 - (int(叠加概率角色数量 / 5) * 0.005 / (初始概率_星4 + 初始概率_星3) * 初始概率_星3)

    # print(托盘)
    # print('单次抽卡数量：' + str(单次抽卡数量))
    # print('总抽卡数量：' + str(总抽卡数量))
    # print('剩余宝珠数量：' + str(宝珠数量))
    # print('星5精选：' + str(round(概率_星5精选 * 100, 2)) + '%')
    # print('星5：' + str(round(概率_星5 * 100, 2)) + '%')
    # print('星4：' + str(round(概率_星4 * 100, 2)) + '%')
    # print('星3：' + str(round(概率_星3 * 100, 2)) + '%')
    # a = input()

print('总出货数量：' + str(总出货数量))
print('总歪数量：' + str(总歪数量))